
EPS  BOOTLOADER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800200  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000678  00800300  00800300  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b43  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115e  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b6a  00000000  00000000  00003545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005af  00000000  00000000  000049e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e8       	ldi	r30, 0x8E	; 142
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 37       	cpi	r26, 0x78	; 120
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	25 d2       	rcall	.+1098   	; 0x56a <main>
 120:	34 c2       	rjmp	.+1128   	; 0x58a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <BOOT_PAGE>:
 *  Author: Ahmed H. Zakaria
 */ 
#include <BOOTLOADER.h>

void BOOT_PAGE(uint16_t Page ,uint8_t BUFFER_Hex[])
{
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	cf 93       	push	r28
 12e:	db 01       	movw	r26, r22
	Page=BUFFER_Hex[1] | BUFFER_Hex[0]<<8;
	uint16_t i;
	uint32_t Address;
	Address = Page * SPM_PAGESIZE ;
 130:	4d 91       	ld	r20, X+
 132:	5c 91       	ld	r21, X
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	44 27       	eor	r20, r20
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
	boot_page_erase_safe (Address);
 13c:	07 b6       	in	r0, 0x37	; 55
 13e:	00 fc       	sbrc	r0, 0
 140:	fd cf       	rjmp	.-6      	; 0x13c <BOOT_PAGE+0x18>
 142:	f9 99       	sbic	0x1f, 1	; 31
 144:	fe cf       	rjmp	.-4      	; 0x142 <BOOT_PAGE+0x1e>
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	fa 01       	movw	r30, r20
 14a:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 14e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7c0057>
 152:	e8 95       	spm
 154:	9d 01       	movw	r18, r26
 156:	33 95       	inc	r19
 158:	6a 01       	movw	r12, r20
 15a:	7b 01       	movw	r14, r22
	for (i=0; i < SPM_PAGESIZE; i+=2)
	{
		boot_page_fill_safe(Address + (i), BUFFER_Hex[i+2] | BUFFER_Hex[i+3]<<8);
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	07 b6       	in	r0, 0x37	; 55
 160:	00 fc       	sbrc	r0, 0
 162:	fd cf       	rjmp	.-6      	; 0x15e <BOOT_PAGE+0x3a>
 164:	f9 99       	sbic	0x1f, 1	; 31
 166:	fe cf       	rjmp	.-4      	; 0x164 <BOOT_PAGE+0x40>
 168:	13 96       	adiw	r26, 0x03	; 3
 16a:	8c 91       	ld	r24, X
 16c:	13 97       	sbiw	r26, 0x03	; 3
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	98 2f       	mov	r25, r24
 172:	88 27       	eor	r24, r24
 174:	12 96       	adiw	r26, 0x02	; 2
 176:	ec 91       	ld	r30, X
 178:	12 97       	sbiw	r26, 0x02	; 2
 17a:	8e 2b       	or	r24, r30
 17c:	0c 01       	movw	r0, r24
 17e:	f6 01       	movw	r30, r12
 180:	e0 92 5b 00 	sts	0x005B, r14	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 184:	c0 93 57 00 	sts	0x0057, r28	; 0x800057 <__TEXT_REGION_LENGTH__+0x7c0057>
 188:	e8 95       	spm
 18a:	11 24       	eor	r1, r1
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	c8 0e       	add	r12, r24
 192:	d1 1c       	adc	r13, r1
 194:	e1 1c       	adc	r14, r1
 196:	f1 1c       	adc	r15, r1
	Page=BUFFER_Hex[1] | BUFFER_Hex[0]<<8;
	uint16_t i;
	uint32_t Address;
	Address = Page * SPM_PAGESIZE ;
	boot_page_erase_safe (Address);
	for (i=0; i < SPM_PAGESIZE; i+=2)
 198:	a2 17       	cp	r26, r18
 19a:	b3 07       	cpc	r27, r19
 19c:	01 f7       	brne	.-64     	; 0x15e <BOOT_PAGE+0x3a>
	{
		boot_page_fill_safe(Address + (i), BUFFER_Hex[i+2] | BUFFER_Hex[i+3]<<8);
	}
	boot_page_write_safe (Address);
 19e:	07 b6       	in	r0, 0x37	; 55
 1a0:	00 fc       	sbrc	r0, 0
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <BOOT_PAGE+0x7a>
 1a4:	f9 99       	sbic	0x1f, 1	; 31
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <BOOT_PAGE+0x80>
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	fa 01       	movw	r30, r20
 1ac:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 1b0:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7c0057>
 1b4:	e8 95       	spm
	boot_rww_enable_safe();
 1b6:	07 b6       	in	r0, 0x37	; 55
 1b8:	00 fc       	sbrc	r0, 0
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <BOOT_PAGE+0x92>
 1bc:	f9 99       	sbic	0x1f, 1	; 31
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <BOOT_PAGE+0x98>
 1c0:	81 e1       	ldi	r24, 0x11	; 17
 1c2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7c0057>
 1c6:	e8 95       	spm
}
 1c8:	cf 91       	pop	r28
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <Start_Boot>:

void Start_Boot(void)
{
	NO_PAGES = DATA[0] << 8 | DATA[1];
 1d4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 1d8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__data_end+0x1>
 1dc:	98 27       	eor	r25, r24
 1de:	89 27       	eor	r24, r25
 1e0:	98 27       	eor	r25, r24
 1e2:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <NO_PAGES+0x1>
 1e6:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <NO_PAGES>
	PAGE_NO = 0x0000;
 1ea:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <PAGE_NO+0x1>
 1ee:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <PAGE_NO>
	REPLY[0] = PAGE_NO << 8;
 1f2:	e4 e8       	ldi	r30, 0x84	; 132
 1f4:	f7 e0       	ldi	r31, 0x07	; 7
 1f6:	10 82       	st	Z, r1
	REPLY[1] = PAGE_NO;
 1f8:	11 82       	std	Z+1, r1	; 0x01
	EUSP.SGID = OPERATION;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <EUSP+0x2>
	TELEMETRY_Tx();
 200:	75 c0       	rjmp	.+234    	; 0x2ec <TELEMETRY_Tx>

00000202 <Operation_Boot>:
}

void Operation_Boot(void)
{
	if (PAGE_NO != NO_PAGES)
 202:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <PAGE_NO>
 206:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <PAGE_NO+0x1>
 20a:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <NO_PAGES>
 20e:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <NO_PAGES+0x1>
 212:	82 17       	cp	r24, r18
 214:	93 07       	cpc	r25, r19
 216:	51 f0       	breq	.+20     	; 0x22c <Operation_Boot+0x2a>
	{
		PAGE_NO++;
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <PAGE_NO+0x1>
 21e:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <PAGE_NO>
		REPLY[0] = PAGE_NO << 8;
 222:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <REPLY>
		REPLY[1] = PAGE_NO;
 226:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <REPLY+0x1>
		TELEMETRY_Tx();
 22a:	60 c0       	rjmp	.+192    	; 0x2ec <TELEMETRY_Tx>
	}else
	{
		EUSP.SGID = CHECK_SUM;
 22c:	22 e0       	ldi	r18, 0x02	; 2
 22e:	20 93 7d 07 	sts	0x077D, r18	; 0x80077d <EUSP+0x2>
		EUSP.RL = 0x01;
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <EUSP+0x4>
		REPLY[0] =CHECK_SUM_APP(NO_PAGES);
 238:	48 d1       	rcall	.+656    	; 0x4ca <CHECK_SUM_APP>
 23a:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <REPLY>
		TELEMETRY_Tx();
 23e:	56 d0       	rcall	.+172    	; 0x2ec <TELEMETRY_Tx>
		PAGE_NO=0;
 240:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <PAGE_NO+0x1>
 244:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <PAGE_NO>
 248:	08 95       	ret

0000024a <Finsh_BOOT>:
	}
}

void Finsh_BOOT(void)
{
	ERASE_EEPROM();
 24a:	3d d0       	rcall	.+122    	; 0x2c6 <ERASE_EEPROM>
	WRITE_EEPROM(0x0BED ,VAILD_APP);
 24c:	6e eb       	ldi	r22, 0xBE	; 190
 24e:	8d ee       	ldi	r24, 0xED	; 237
 250:	9b e0       	ldi	r25, 0x0B	; 11
 252:	2a d0       	rcall	.+84     	; 0x2a8 <WRITE_EEPROM>
	REPLY[0] = 0xAC;
 254:	8c ea       	ldi	r24, 0xAC	; 172
 256:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <REPLY>
	TELEMETRY_Tx();
 25a:	48 d0       	rcall	.+144    	; 0x2ec <TELEMETRY_Tx>
	asm("jmp 0");
 25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 260:	08 95       	ret

00000262 <WHITE_APP>:
}

void WHITE_APP(void)
{
	switch (EUSP.SA)
 262:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <EUSP>
 266:	80 32       	cpi	r24, 0x20	; 32
 268:	b1 f4       	brne	.+44     	; 0x296 <WHITE_APP+0x34>
	{
	case ADDr_SUBSYSTM:switch (EUSP.GID)
 26a:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <EUSP+0x1>
 26e:	8e 3b       	cpi	r24, 0xBE	; 190
 270:	91 f4       	brne	.+36     	; 0x296 <WHITE_APP+0x34>
	{
	    case BOOT:switch (EUSP.SGID)
 272:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <EUSP+0x2>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	29 f0       	breq	.+10     	; 0x284 <WHITE_APP+0x22>
 27a:	18 f0       	brcs	.+6      	; 0x282 <WHITE_APP+0x20>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	51 f0       	breq	.+20     	; 0x294 <WHITE_APP+0x32>
 280:	08 95       	ret
	    {
			case START:Start_Boot();
 282:	a8 cf       	rjmp	.-176    	; 0x1d4 <Start_Boot>
			   break;
			case OPERATION:BOOT_PAGE(SET_PAGE,DATA);Operation_Boot();
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	73 e0       	ldi	r23, 0x03	; 3
 288:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <SET_PAGE>
 28c:	90 91 3a 06 	lds	r25, 0x063A	; 0x80063a <SET_PAGE+0x1>
 290:	49 df       	rcall	.-366    	; 0x124 <BOOT_PAGE>
			   break;
			case END:Finsh_BOOT();
 292:	b7 cf       	rjmp	.-146    	; 0x202 <Operation_Boot>
 294:	da cf       	rjmp	.-76     	; 0x24a <Finsh_BOOT>
 296:	08 95       	ret

00000298 <CHECK_VAILD_APP>:
	}
}

void CHECK_VAILD_APP(void)
{
	switch (READ_EEPROM(0x0BED))
 298:	8d ee       	ldi	r24, 0xED	; 237
 29a:	9b e0       	ldi	r25, 0x0B	; 11
 29c:	0d d0       	rcall	.+26     	; 0x2b8 <READ_EEPROM>
 29e:	8e 3b       	cpi	r24, 0xBE	; 190
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <CHECK_VAILD_APP+0xe>
	{
		case VAILD_APP:asm("jmp 0");
 2a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 2a6:	08 95       	ret

000002a8 <WRITE_EEPROM>:
 */ 
#include <E2PROM.h>

void WRITE_EEPROM(uint16_t Addr ,uint8_t Data)
{
	while(EECR & (1<<EEPE));
 2a8:	f9 99       	sbic	0x1f, 1	; 31
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <WRITE_EEPROM>
	EEAR = Addr;
 2ac:	92 bd       	out	0x22, r25	; 34
 2ae:	81 bd       	out	0x21, r24	; 33
	EEDR = Data;
 2b0:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE);
 2b2:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
 2b4:	f9 9a       	sbi	0x1f, 1	; 31
 2b6:	08 95       	ret

000002b8 <READ_EEPROM>:
}

uint8_t READ_EEPROM(uint16_t Addr)
{
	while(EECR & (1<<EEPE));
 2b8:	f9 99       	sbic	0x1f, 1	; 31
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <READ_EEPROM>
	EEAR = Addr;
 2bc:	92 bd       	out	0x22, r25	; 34
 2be:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
 2c0:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
 2c2:	80 b5       	in	r24, 0x20	; 32
}
 2c4:	08 95       	ret

000002c6 <ERASE_EEPROM>:

void ERASE_EEPROM(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	for (uint16_t i=0;i < EEPROM_SIZE;i++)
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (READ_EEPROM(i) != 0xFF)
 2ce:	ce 01       	movw	r24, r28
 2d0:	f3 df       	rcall	.-26     	; 0x2b8 <READ_EEPROM>
 2d2:	8f 3f       	cpi	r24, 0xFF	; 255
 2d4:	19 f0       	breq	.+6      	; 0x2dc <ERASE_EEPROM+0x16>
		{
			WRITE_EEPROM(i,0xFF);
 2d6:	6f ef       	ldi	r22, 0xFF	; 255
 2d8:	ce 01       	movw	r24, r28
 2da:	e6 df       	rcall	.-52     	; 0x2a8 <WRITE_EEPROM>
	return EEDR;
}

void ERASE_EEPROM(void)
{
	for (uint16_t i=0;i < EEPROM_SIZE;i++)
 2dc:	21 96       	adiw	r28, 0x01	; 1
 2de:	c1 15       	cp	r28, r1
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	d8 07       	cpc	r29, r24
 2e4:	a1 f7       	brne	.-24     	; 0x2ce <ERASE_EEPROM+0x8>
		if (READ_EEPROM(i) != 0xFF)
		{
			WRITE_EEPROM(i,0xFF);
		}
	}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <TELEMETRY_Tx>:
} ;



void TELEMETRY_Tx(void)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
	uint8_t crc = 0x00 ;
	if (EUSP.RL != 0x00)
 2f2:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <EUSP+0x4>
 2f6:	88 23       	and	r24, r24
 2f8:	09 f4       	brne	.+2      	; 0x2fc <TELEMETRY_Tx+0x10>
 2fa:	52 c0       	rjmp	.+164    	; 0x3a0 <TELEMETRY_Tx+0xb4>
	{
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.STATUS)   ] ;
 2fc:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <EUSP+0x6>
 300:	2d d1       	rcall	.+602    	; 0x55c <UART2_Transmit>
 302:	e8 2f       	mov	r30, r24
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e0 50       	subi	r30, 0x00	; 0
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	c0 81       	ld	r28, Z
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.SA)       ] ;
 30c:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <EUSP>
 310:	25 d1       	rcall	.+586    	; 0x55c <UART2_Transmit>
 312:	8c 27       	eor	r24, r28
 314:	e8 2f       	mov	r30, r24
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e0 50       	subi	r30, 0x00	; 0
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	c0 81       	ld	r28, Z
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.GID)      ] ;
 31e:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <EUSP+0x1>
 322:	1c d1       	rcall	.+568    	; 0x55c <UART2_Transmit>
 324:	8c 27       	eor	r24, r28
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e0 50       	subi	r30, 0x00	; 0
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	c0 81       	ld	r28, Z
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.SGID)     ] ;
 330:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <EUSP+0x2>
 334:	13 d1       	rcall	.+550    	; 0x55c <UART2_Transmit>
 336:	8c 27       	eor	r24, r28
 338:	e8 2f       	mov	r30, r24
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	e0 50       	subi	r30, 0x00	; 0
 33e:	fe 4f       	sbci	r31, 0xFE	; 254
 340:	c0 81       	ld	r28, Z
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.RL)       ] ;
 342:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <EUSP+0x4>
 346:	0a d1       	rcall	.+532    	; 0x55c <UART2_Transmit>
 348:	8c 27       	eor	r24, r28
 34a:	e8 2f       	mov	r30, r24
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e0 50       	subi	r30, 0x00	; 0
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	c0 81       	ld	r28, Z
 354:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <EUSP+0x4>
		if (EUSP.RL == 0xFF)
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	19 f4       	brne	.+6      	; 0x362 <TELEMETRY_Tx+0x76>
 35c:	80 e0       	ldi	r24, 0x00	; 0
		{
			LENGTH = 256;
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	03 c0       	rjmp	.+6      	; 0x368 <TELEMETRY_Tx+0x7c>
 362:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <EUSP+0x3>
		}else
		{
			LENGTH = EUSP.DoL;
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <LENGTH+0x1>
 36c:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <LENGTH>
 370:	04 e8       	ldi	r16, 0x84	; 132
} ;



void TELEMETRY_Tx(void)
{
 372:	17 e0       	ldi	r17, 0x07	; 7
 374:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <EUSP+0x4>
			LENGTH = 256;
		}else
		{
			LENGTH = EUSP.DoL;
		}
		for (uint16_t i = 0 ; i < EUSP.RL ; i++)
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	98 01       	movw	r18, r16
 37c:	24 58       	subi	r18, 0x84	; 132
 37e:	37 40       	sbci	r19, 0x07	; 7
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	58 f4       	brcc	.+22     	; 0x39c <TELEMETRY_Tx+0xb0>
		{
			crc = crc8_table [ crc ^ UART2_Transmit(REPLY[i]) ] ;
 386:	f8 01       	movw	r30, r16
 388:	81 91       	ld	r24, Z+
 38a:	8f 01       	movw	r16, r30
 38c:	e7 d0       	rcall	.+462    	; 0x55c <UART2_Transmit>
 38e:	8c 27       	eor	r24, r28
 390:	e8 2f       	mov	r30, r24
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e0 50       	subi	r30, 0x00	; 0
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	c0 81       	ld	r28, Z
 39a:	ec cf       	rjmp	.-40     	; 0x374 <TELEMETRY_Tx+0x88>
		}
		UART2_Transmit(crc);
 39c:	8c 2f       	mov	r24, r28
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <TELEMETRY_Tx+0xc4>
	}
	else
	{
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.STATUS)    ] ;
 3a0:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <EUSP+0x6>
 3a4:	db d0       	rcall	.+438    	; 0x55c <UART2_Transmit>
 3a6:	e8 2f       	mov	r30, r24
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	e0 50       	subi	r30, 0x00	; 0
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
		UART2_Transmit(crc);
 3ae:	80 81       	ld	r24, Z
	}
}
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
		UART2_Transmit(crc);
	}
	else
	{
		crc = crc8_table [ crc ^ UART2_Transmit(EUSP.STATUS)    ] ;
		UART2_Transmit(crc);
 3b6:	d2 c0       	rjmp	.+420    	; 0x55c <UART2_Transmit>

000003b8 <DATA_Rx>:
 3b8:	0f 93       	push	r16
	}
}

void DATA_Rx(uint8_t stringTx[] ,uint16_t n)
{
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	ec 01       	movw	r28, r24
 3c2:	8c 01       	movw	r16, r24
 3c4:	06 0f       	add	r16, r22
 3c6:	17 1f       	adc	r17, r23
	for(uint16_t i=0;i < n;i++)
 3c8:	c0 17       	cp	r28, r16
 3ca:	d1 07       	cpc	r29, r17
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <DATA_Rx+0x1c>
	{
		stringTx[i]=UART2_Receive();
 3ce:	bf d0       	rcall	.+382    	; 0x54e <UART2_Receive>
 3d0:	89 93       	st	Y+, r24
 3d2:	fa cf       	rjmp	.-12     	; 0x3c8 <DATA_Rx+0x10>
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <COMMAND_Rx>:

void COMMAND_Rx(void)
{
	EUSP.SA   = UART2_Receive();
 3de:	b7 d0       	rcall	.+366    	; 0x54e <UART2_Receive>
 3e0:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <EUSP>
	if (EUSP.SA == EPS)
 3e4:	80 32       	cpi	r24, 0x20	; 32
	{
		EUSP.GID  = UART2_Receive();
 3e6:	31 f5       	brne	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3e8:	b2 d0       	rcall	.+356    	; 0x54e <UART2_Receive>
 3ea:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <EUSP+0x1>
		EUSP.SGID = UART2_Receive();
 3ee:	af d0       	rcall	.+350    	; 0x54e <UART2_Receive>
 3f0:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <EUSP+0x2>
		EUSP.DoL  = UART2_Receive();
 3f4:	ac d0       	rcall	.+344    	; 0x54e <UART2_Receive>
 3f6:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <EUSP+0x3>
		EUSP.RL   = UART2_Receive();
 3fa:	a9 d0       	rcall	.+338    	; 0x54e <UART2_Receive>
 3fc:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <EUSP+0x4>
		if (EUSP.DoL == 0xFF)
 400:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <EUSP+0x3>
 404:	8f 3f       	cpi	r24, 0xFF	; 255
 406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			LENGTH = 258;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}else
		{
			LENGTH = EUSP.DoL;
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <LENGTH+0x1>
 414:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <LENGTH>
		}
		DATA_Rx(DATA,LENGTH);
 418:	60 91 f4 04 	lds	r22, 0x04F4	; 0x8004f4 <LENGTH>
 41c:	70 91 f5 04 	lds	r23, 0x04F5	; 0x8004f5 <LENGTH+0x1>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	93 e0       	ldi	r25, 0x03	; 3
		EUSP.CRC  = UART2_Receive();
 424:	c9 df       	rcall	.-110    	; 0x3b8 <DATA_Rx>
 426:	93 d0       	rcall	.+294    	; 0x54e <UART2_Receive>
 428:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <EUSP+0x5>
		FLAG_START = TRUE;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <FLAG_START>
 432:	08 95       	ret
	} 
	else
	{
		FLAG_START = FALSE;
 434:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <FLAG_START>
 438:	08 95       	ret

0000043a <CRC_COMMAND>:
}

uint8_t CRC_COMMAND(void)
{
	uint8_t crc = 0x00 ;
	crc = crc8_table [ crc ^ EUSP.SA   ] ;
 43a:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <EUSP>
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	e0 50       	subi	r30, 0x00	; 0
 442:	fe 4f       	sbci	r31, 0xFE	; 254
	crc = crc8_table [ crc ^ EUSP.GID  ] ;
 444:	e0 81       	ld	r30, Z
 446:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <EUSP+0x1>
 44a:	e8 27       	eor	r30, r24
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	e0 50       	subi	r30, 0x00	; 0
 450:	fe 4f       	sbci	r31, 0xFE	; 254
	crc = crc8_table [ crc ^ EUSP.SGID ] ;
 452:	e0 81       	ld	r30, Z
 454:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <EUSP+0x2>
 458:	e8 27       	eor	r30, r24
 45a:	f0 e0       	ldi	r31, 0x00	; 0
	crc = crc8_table [ crc ^ EUSP.DoL  ] ;
 45c:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <EUSP+0x3>
uint8_t CRC_COMMAND(void)
{
	uint8_t crc = 0x00 ;
	crc = crc8_table [ crc ^ EUSP.SA   ] ;
	crc = crc8_table [ crc ^ EUSP.GID  ] ;
	crc = crc8_table [ crc ^ EUSP.SGID ] ;
 460:	e0 50       	subi	r30, 0x00	; 0
 462:	fe 4f       	sbci	r31, 0xFE	; 254
	crc = crc8_table [ crc ^ EUSP.DoL  ] ;
 464:	e0 81       	ld	r30, Z
 466:	e9 27       	eor	r30, r25
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e0 50       	subi	r30, 0x00	; 0
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
	crc = crc8_table [ crc ^ EUSP.RL   ] ;
 46e:	e0 81       	ld	r30, Z
 470:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <EUSP+0x4>
 474:	e8 27       	eor	r30, r24
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	e0 50       	subi	r30, 0x00	; 0
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	e0 81       	ld	r30, Z
	if (EUSP.DoL == 0xFF)
 47e:	9f 3f       	cpi	r25, 0xFF	; 255
 480:	19 f4       	brne	.+6      	; 0x488 <CRC_COMMAND+0x4e>
	{
		LENGTH = 258;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	02 c0       	rjmp	.+4      	; 0x48c <CRC_COMMAND+0x52>
	}else
	{
		LENGTH = EUSP.DoL;
 488:	89 2f       	mov	r24, r25
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <LENGTH+0x1>
 490:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <LENGTH>
	}
	for (uint16_t i = 0 ; i < LENGTH ; i++)
 494:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <LENGTH>
 498:	30 91 f5 04 	lds	r19, 0x04F5	; 0x8004f5 <LENGTH+0x1>
 49c:	a0 e0       	ldi	r26, 0x00	; 0
 49e:	b3 e0       	ldi	r27, 0x03	; 3
 4a0:	cd 01       	movw	r24, r26
 4a2:	80 50       	subi	r24, 0x00	; 0
 4a4:	93 40       	sbci	r25, 0x03	; 3
 4a6:	82 17       	cp	r24, r18
 4a8:	93 07       	cpc	r25, r19
 4aa:	38 f4       	brcc	.+14     	; 0x4ba <CRC_COMMAND+0x80>
	{
		crc = crc8_table [ crc ^ DATA[i] ] ;
 4ac:	8d 91       	ld	r24, X+
 4ae:	e8 27       	eor	r30, r24
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e0 50       	subi	r30, 0x00	; 0
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	e0 81       	ld	r30, Z
 4b8:	f3 cf       	rjmp	.-26     	; 0x4a0 <CRC_COMMAND+0x66>
	}
	crc = crc8_table [ crc ^ EUSP.CRC ] ;
 4ba:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <EUSP+0x5>
 4be:	e8 27       	eor	r30, r24
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	e0 50       	subi	r30, 0x00	; 0
 4c4:	fe 4f       	sbci	r31, 0xFE	; 254
	return crc ;
}
 4c6:	80 81       	ld	r24, Z
 4c8:	08 95       	ret

000004ca <CHECK_SUM_APP>:

uint8_t CHECK_SUM_APP(uint16_t PAGES)
{
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
	uint8_t CRC = 0x00;
	for (uint32_t i = 0;i < ((PAGES+1)*SPM_PAGESIZE);i++)
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	58 2f       	mov	r21, r24
 4d2:	44 27       	eor	r20, r20
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	00 e0       	ldi	r16, 0x00	; 0
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	98 01       	movw	r18, r16
	return crc ;
}

uint8_t CHECK_SUM_APP(uint16_t PAGES)
{
	uint8_t CRC = 0x00;
 4de:	80 e0       	ldi	r24, 0x00	; 0
	for (uint32_t i = 0;i < ((PAGES+1)*SPM_PAGESIZE);i++)
 4e0:	04 17       	cp	r16, r20
 4e2:	15 07       	cpc	r17, r21
 4e4:	26 07       	cpc	r18, r22
 4e6:	37 07       	cpc	r19, r23
 4e8:	68 f4       	brcc	.+26     	; 0x504 <CHECK_SUM_APP+0x3a>
	{
		CRC = crc8_table [ CRC ^ pgm_read_byte(i) ] ;
 4ea:	f8 01       	movw	r30, r16
 4ec:	94 91       	lpm	r25, Z
 4ee:	e9 2f       	mov	r30, r25
 4f0:	e8 27       	eor	r30, r24
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	e0 50       	subi	r30, 0x00	; 0
 4f6:	fe 4f       	sbci	r31, 0xFE	; 254
 4f8:	80 81       	ld	r24, Z
}

uint8_t CHECK_SUM_APP(uint16_t PAGES)
{
	uint8_t CRC = 0x00;
	for (uint32_t i = 0;i < ((PAGES+1)*SPM_PAGESIZE);i++)
 4fa:	0f 5f       	subi	r16, 0xFF	; 255
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	2f 4f       	sbci	r18, 0xFF	; 255
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	ee cf       	rjmp	.-36     	; 0x4e0 <CHECK_SUM_APP+0x16>
	{
		CRC = crc8_table [ CRC ^ pgm_read_byte(i) ] ;
	}
	return CRC ;
}
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	08 95       	ret

0000050a <Rx_CRC_Tx>:

void Rx_CRC_Tx(void)
{
	uint8_t crc = 0x00 ;
	COMMAND_Rx();
 50a:	69 df       	rcall	.-302    	; 0x3de <COMMAND_Rx>
	if (FLAG_START)
 50c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <FLAG_START>
 510:	88 23       	and	r24, r24
	{
		if (CRC_COMMAND() == 0x00)
 512:	89 f0       	breq	.+34     	; 0x536 <Rx_CRC_Tx+0x2c>
 514:	92 df       	rcall	.-220    	; 0x43a <CRC_COMMAND>
 516:	81 11       	cpse	r24, r1
 518:	04 c0       	rjmp	.+8      	; 0x522 <Rx_CRC_Tx+0x18>
		{
			EUSP.STATUS=ACK;
 51a:	8c ea       	ldi	r24, 0xAC	; 172
 51c:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <EUSP+0x6>
			WHITE_APP();
 520:	a0 ce       	rjmp	.-704    	; 0x262 <WHITE_APP>
			}else{
			EUSP.STATUS=NACK;
 522:	84 e5       	ldi	r24, 0x54	; 84
 524:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <EUSP+0x6>
			crc = crc8_table [ crc ^ UART2_Transmit(EUSP.STATUS) ] ;
 528:	19 d0       	rcall	.+50     	; 0x55c <UART2_Transmit>
 52a:	e8 2f       	mov	r30, r24
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	e0 50       	subi	r30, 0x00	; 0
			UART2_Transmit(crc);
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	80 81       	ld	r24, Z
 534:	13 c0       	rjmp	.+38     	; 0x55c <UART2_Transmit>
 536:	08 95       	ret

00000538 <UART2_Init>:

#include <UART.h>

void UART2_Init(uint8_t  baud)
{
	UBRR2L=(uint8_t) baud;
 538:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UBRR2H=(uint8_t)( baud>>8);
 53c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
	UCSR2B = (1<<TXEN2)|(1<<RXEN2);
 540:	88 e1       	ldi	r24, 0x18	; 24
 542:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = (3<<UCSZ20);
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 54c:	08 95       	ret

0000054e <UART2_Receive>:
}

uint8_t UART2_Receive(void)
{
	while ( !(UCSR2A & (1<<RXC2)) );
 54e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 552:	87 ff       	sbrs	r24, 7
 554:	fc cf       	rjmp	.-8      	; 0x54e <UART2_Receive>
	return UDR2;
 556:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
}
 55a:	08 95       	ret

0000055c <UART2_Transmit>:

uint8_t UART2_Transmit(uint8_t data)
{
	UDR2 = data;
 55c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	while ( !( UCSR2A & (1<<UDRE2)) );
 560:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 564:	95 ff       	sbrs	r25, 5
 566:	fc cf       	rjmp	.-8      	; 0x560 <UART2_Transmit+0x4>
	return data;
 568:	08 95       	ret

0000056a <main>:



int main(void)
{
	CHECK_VAILD_APP();
 56a:	96 de       	rcall	.-724    	; 0x298 <CHECK_VAILD_APP>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 56c:	9e e0       	ldi	r25, 0x0E	; 14
 56e:	88 e1       	ldi	r24, 0x18	; 24
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	a8 95       	wdr
 576:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_1S);
	UART2_Init(MYUBRR);
 580:	87 e6       	ldi	r24, 0x67	; 103
 582:	da df       	rcall	.-76     	; 0x538 <UART2_Init>
    while (1) 
    {
		wdt_reset();
 584:	a8 95       	wdr
		Rx_CRC_Tx();
 586:	c1 df       	rcall	.-126    	; 0x50a <Rx_CRC_Tx>
 588:	fd cf       	rjmp	.-6      	; 0x584 <main+0x1a>

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
